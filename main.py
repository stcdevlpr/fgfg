import asyncio
import os
import random

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from pyrogram import Client
from pyrogram.enums import ChatMemberStatus
from pyrogram.errors import FloodWait
from pyrogram import filters
from pyrogram.types import Message

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DEFAULT_TIMEOUT_BETWEEN_MESSAGES = random.randint(60, 120)
DEFAULT_JOB_INTERVAL = random.randint(60, 120)
SESSION_NAME = "account"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
custom_messages = [
    "–£–≤–∏–¥–µ–ª–∞ –í–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –∫–∞–Ω–∞–ª. –ú–µ–Ω—è –∑–æ–≤—É—Ç –Æ–ª–∏—è, —è –º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–Ω–∞–ª–∞ –õ—å–≤–∞ –ö–æ—Ä–Ω–∏–ª–æ–≤–∞. \n\n–Ø —Ç–∞–∫ –ø–æ–Ω–∏–º–∞—é, –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –ø–æ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥—É –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º, –≤–µ—Ä–Ω–æ? üòä",
    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã\n –Ø –Æ–ª–∏—è, –ø–æ–º–æ—â–Ω–∏—Ü–∞ –õ—å–≤–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á–∞. –£–≤–∏–¥–µ–ª–∞, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –≤–∞–º –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥ –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º?",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòä –ú–µ–Ω—è –∑–æ–≤—É—Ç –Æ–ª–∏—è, —è –ø–æ–º–æ—â–Ω–∏—Ü–∞ –õ—å–≤–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á–∞\n\n–£–≤–∏–¥–µ–ª–∞, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! –•–æ—Ç–µ–ª–æ—Å—å –±—ã —É–∑–Ω–∞—Ç—å, –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥–µ –∏–ª–∏ –æ –Ω–∞—à–µ–º –æ–±—É—á–µ–Ω–∏–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π —Å—Ñ–µ—Ä–µ?",
    "–ú–µ–Ω—è –∑–æ–≤—É—Ç –Æ–ª–∏—è, —è –ø–æ–º–æ—â–Ω–∏—Ü–∞ –õ—å–≤–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á–∞ üëãüèª \n\n–£–≤–∏–¥–µ–ª–∞, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. –£ –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –∏–ª–∏ –æ–±—É—á–µ–Ω–∏—é –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π —Å—Ñ–µ—Ä–µ?"
]


custom_interval = DEFAULT_JOB_INTERVAL
admin_id = int(os.getenv("Admin_id"))


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = str(os.getenv("Api_id"))
API_HASH = os.getenv("Api_hash")
PHONE_NUMBER = os.getenv("Phone_number")
CHANNEL_ID = str(os.getenv("Channel_id"))

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram
client = Client(
    SESSION_NAME,
    api_id=API_ID,
    api_hash=API_HASH,
    phone_number=PHONE_NUMBER,
)


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def get_random_welcome_message():
    return random.choice(custom_messages)


async def check_client_status(channel_id):
    try:
        chat_member = await client.get_chat_member(channel_id, "me")
        return chat_member.status
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return None


async def approve_and_welcome_users():
    """
    –û–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    status = await check_client_status(CHANNEL_ID)
    if status != ChatMemberStatus.ADMINISTRATOR:
        print("–ö–ª–∏–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    try:
        async for request in client.get_chat_join_requests(CHANNEL_ID):
            user_id = request.user.id
            print(f"–û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await client.approve_chat_join_request(CHANNEL_ID, user_id)

            try:
                welcome_message = get_random_welcome_message()
                print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                await client.send_message(user_id, welcome_message)
                await asyncio.sleep(DEFAULT_TIMEOUT_BETWEEN_MESSAGES)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except FloodWait as flood:
        print(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–µ–º {flood.value} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(flood.value)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def start_scheduler(restart=False):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
    """
    if restart:
        scheduler.remove_all_jobs()

    scheduler.add_job(approve_and_welcome_users, "interval", seconds=custom_interval)
    scheduler.start()
    print(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {custom_interval} —Å–µ–∫—É–Ω–¥.")


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
    """
    print("–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram...")
    async with client:
        print("–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
        start_scheduler()
        await asyncio.Event().wait()  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã


@client.on_message(filters.private)
async def handle_private_message(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º.")


if __name__ == "__main__":
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫ asyncio.run —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
